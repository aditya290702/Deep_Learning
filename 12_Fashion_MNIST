import torch
from torch import nn     #nn stands for neural networks
from torchvision import datasets   #for importing datasets
from torchvision.transforms import ToTensor
from torch.utils.data import DataLoader
from matplotlib import pyplot as plt    

#for downloading the test data and the train data
training_data = datasets.FashionMNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor()
)

#initialising the batch size
batch_size = 64

#creating data loaders
Data_loader_train = DataLoader(training_data,batch_size)
Data_loader_test = DataLoader(test_data,batch_size)

for x,y in Data_loader_test:
    print(f"Shape of X [N, C, H, W]: {x.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break

#Building models
#selecting the device
#(CPU or GPU)

device = ( "cuda" if torch.cuda.is_available() else
           "cpu")
print()
print(f"Using {device} device")

labels_map = {
    0: "T-Shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle Boot",
}
figure = plt.figure(figsize=(8, 8))
cols, rows = 3, 3
for i in range(1, cols * rows + 1):
    sample_idx = torch.randint(len(training_data), size=(1,)).item()
    img, label = training_data[sample_idx]
    figure.add_subplot(rows, cols, i)
    plt.title(labels_map[label])
    plt.axis("off")
    plt.imshow(img.squeeze(), cmap="gray")
plt.show()

#specifying the model architecture

model = nn.Sequential(
    nn.Flatten(),
    nn.Linear(28*28,512),
    nn.ReLU(),
    nn.Linear(512,512),
    nn.ReLU(),
    nn.Linear(512,10)
    ).to(device)

print(model)


x = torch.randn(1,28,28).to(device)

logits = model(x)
print(logits)
