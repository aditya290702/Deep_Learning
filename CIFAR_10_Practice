import matplotlib.pyplot as plt
import torch
from torchvision import datasets
from torchvision.transforms import ToTensor
from torch.utils.data import DataLoader



training_data = datasets.CIFAR10(
    root="data",
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.CIFAR10(
    root="data",
    train=False,
    download=True,
    transform=ToTensor()
)

# Set batch size (adjust if needed)
batch_size = 64

# Create DataLoaders (use shuffle=True for training)
train_loader = DataLoader(training_data, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=False)

# Print data shapes
for images, labels in test_loader:
    print("Shape of images:", images.shape)
    print("Shape of labels:", labels.shape)
    break

print("\n----------------------------------------------------")

# Check for available device (GPU or CPU)
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"{device} is being used")

print("\n----------------------------------------------------")

# Define CIFAR-10 class labels (modify if using different dataset)
label_maps = {
    0: "airplane",
    1: "automobile",
    2: "bird",
    3: "cat",
    4: "deer",
    5: "dog",
    6: "frog",
    7: "horse",
    8: "ship",
    9: "truck"
}
 
rows, cols = 2, 5
figure, axes = plt.subplots(rows, cols, figsize=(10, 8))

if len(axes.shape) == 1:
    axes = axes.flatten()

for i in range(1,rows*cols + 1):
    sample_idx = torch.randint(len(training_data), size=(1,)).item()
    img, label = training_data[sample_idx]
    figure.add_subplot(rows,cols,i)
    plt.title(label_maps[label])
    plt.axis("off")
    plt.imshow(img.permute(1,2,0))

plt.tight_layout()
plt.show()
